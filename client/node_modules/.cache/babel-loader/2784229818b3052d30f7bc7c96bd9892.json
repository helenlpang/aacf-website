{"ast":null,"code":"import _classCallCheck from\"/Users/myunginlee/Documents/projects/aacf-website/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/myunginlee/Documents/projects/aacf-website/client/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/myunginlee/Documents/projects/aacf-website/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/myunginlee/Documents/projects/aacf-website/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/myunginlee/Documents/projects/aacf-website/client/node_modules/@babel/runtime/helpers/esm/inherits\";import _slicedToArray from\"/Users/myunginlee/Documents/projects/aacf-website/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{GoogleMap,withScriptjs,withGoogleMap,Marker,InfoWindow}from\"react-google-maps\";import*as churchData from\"../../data/churches.json\";import mapStyles from\"../../mapStyles\";function Map(){//built a hook to keep track of states without a class: selectedChurch tracks which church is clicked and setSelectedChurch can change the church displayed on the map  \nvar _useState=useState(null),_useState2=_slicedToArray(_useState,2),selectedChurch=_useState2[0],setSelectedChurch=_useState2[1];return React.createElement(GoogleMap,{defaultZoom:13,defaultCenter:{lat:42.3736,lng:-71.1097}//centered in cambridge\n,defaultOptions:{styles:mapStyles}},churchData.properties.map(function(church){return React.createElement(Marker,{key:church.features.id,position:{lat:church.features.lat,lng:church.features.lng}//changes selectedChurch based on which marker the user clicks on\n,onClick:function onClick(){setSelectedChurch(church);}//sets icon and size of the church logo\n,icon:{url:'/church.png',scaledSize:new window.google.maps.Size(25,25)}});}),selectedChurch&&//creates infowindow which displays the church name and the church address each time the user clicks on a marker\nReact.createElement(InfoWindow,{position:{lat:selectedChurch.features.lat,lng:selectedChurch.features.lng},onCloseClick:function onCloseClick(){setSelectedChurch(null);}},React.createElement(\"div\",null,React.createElement(\"h2\",{style:{color:'black'}},selectedChurch.features.name),React.createElement(\"p\",{style:{color:'black'}},selectedChurch.features.address))));}//wraps map using withScriptjs\nvar WrappedMap=withScriptjs(withGoogleMap(Map));//render map with Google API and API Key\n//key = AIzaSyASigF8g5y-u4pWOqF41qMmiF2gWBQCUVw\nvar FinalMap=/*#__PURE__*/function(_React$Component){_inherits(FinalMap,_React$Component);function FinalMap(){_classCallCheck(this,FinalMap);return _possibleConstructorReturn(this,_getPrototypeOf(FinalMap).apply(this,arguments));}_createClass(FinalMap,[{key:\"render\",value:function render(){return React.createElement(\"div\",{style:{width:\"83vw\",height:\"60vh\"}},React.createElement(WrappedMap,{googleMapURL:\"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyASigF8g5y-u4pWOqF41qMmiF2gWBQCUVw\",loadingElement:React.createElement(\"div\",{style:{height:\"100%\"}}),containerElement:React.createElement(\"div\",{style:{height:\"100%\"}}),mapElement:React.createElement(\"div\",{style:{height:\"100%\"}})}));}}]);return FinalMap;}(React.Component);export default FinalMap;","map":{"version":3,"sources":["/Users/myunginlee/Documents/projects/aacf-website/client/src/components/Map/Map.js"],"names":["React","useState","GoogleMap","withScriptjs","withGoogleMap","Marker","InfoWindow","churchData","mapStyles","Map","selectedChurch","setSelectedChurch","lat","lng","styles","properties","map","church","features","id","url","scaledSize","window","google","maps","Size","color","name","address","WrappedMap","FinalMap","width","height","Component"],"mappings":"g1BAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CAEA,OACIC,SADJ,CAEIC,YAFJ,CAGIC,aAHJ,CAIIC,MAJJ,CAKIC,UALJ,KAMS,mBANT,CAQA,MAAO,GAAKC,CAAAA,UAAZ,KAA4B,0BAA5B,CACA,MAAOC,CAAAA,SAAP,KAAsB,iBAAtB,CAGA,QAASC,CAAAA,GAAT,EAAe,CACb;AADa,cAEiCR,QAAQ,CAAC,IAAD,CAFzC,wCAEJS,cAFI,eAEYC,iBAFZ,eAIX,MACE,qBAAC,SAAD,EACE,WAAW,CAAE,EADf,CAEE,aAAa,CAAE,CAAEC,GAAG,CAAE,OAAP,CAAgBC,GAAG,CAAE,CAAC,OAAtB,CAAiC;AAFlD,CAGE,cAAc,CAAE,CAACC,MAAM,CAAEN,SAAT,CAHlB,EAOED,UAAU,CAACQ,UAAX,CAAsBC,GAAtB,CAA0B,SAAAC,MAAM,QAC9B,qBAAC,MAAD,EAAQ,GAAG,CAAIA,MAAM,CAACC,QAAP,CAAgBC,EAA/B,CAAmC,QAAQ,CAAE,CAC3CP,GAAG,CAAEK,MAAM,CAACC,QAAP,CAAgBN,GADsB,CAE3CC,GAAG,CAAEI,MAAM,CAACC,QAAP,CAAgBL,GAFsB,CAI3C;AAJF,CAKE,OAAO,CAAE,kBAAM,CACbF,iBAAiB,CAACM,MAAD,CAAjB,CACD,CACD;AARF,CASE,IAAI,CAAE,CACJG,GAAG,CAAE,aADD,CAEJC,UAAU,CAAE,GAAIC,CAAAA,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,IAAvB,CAA4B,EAA5B,CAA+B,EAA/B,CAFR,CATR,EAD8B,EAAhC,CAPF,CAwBEf,cAAc,EACb;AACC,oBAAC,UAAD,EACG,QAAQ,CAAE,CACTE,GAAG,CAAEF,cAAc,CAACQ,QAAf,CAAwBN,GADpB,CAETC,GAAG,CAAEH,cAAc,CAACQ,QAAf,CAAwBL,GAFpB,CADb,CAKG,YAAY,CAAE,uBAAM,CACrBF,iBAAiB,CAAC,IAAD,CAAjB,CACA,CAPF,EAUE,+BACC,0BAAI,KAAK,CAAE,CAACe,KAAK,CAAE,OAAR,CAAX,EAA8BhB,cAAc,CAACQ,QAAf,CAAwBS,IAAtD,CADD,CAEC,yBAAG,KAAK,CAAE,CAACD,KAAK,CAAE,OAAR,CAAV,EAA6BhB,cAAc,CAACQ,QAAf,CAAwBU,OAArD,CAFD,CAVF,CA1BJ,CADF,CA6CF,CAEF;AACE,GAAMC,CAAAA,UAAU,CAAG1B,YAAY,CAACC,aAAa,CAACK,GAAD,CAAd,CAA/B,CAEA;AACA;GACMqB,CAAAA,Q,sRACK,CACP,MACE,4BAAK,KAAK,CAAI,CAAEC,KAAK,CAAE,MAAT,CAAiBC,MAAM,CAAE,MAAzB,CAAd,EACE,oBAAC,UAAD,EACE,YAAY,gIADd,CAEE,cAAc,CAAE,2BAAK,KAAK,CAAE,CAAEA,MAAM,CAAE,MAAV,CAAZ,EAFlB,CAGE,gBAAgB,CAAE,2BAAK,KAAK,CAAE,CAAEA,MAAM,CAAE,MAAV,CAAZ,EAHpB,CAIE,UAAU,CAAE,2BAAK,KAAK,CAAE,CAAEA,MAAM,CAAE,MAAV,CAAZ,EAJd,EADF,CADF,CAUD,C,sBAZoBhC,KAAK,CAACiC,S,EAe7B,cAAeH,CAAAA,QAAf","sourcesContent":["import React, { useState } from 'react';\n\nimport { \n    GoogleMap, \n    withScriptjs, \n    withGoogleMap, \n    Marker,\n    InfoWindow\n  } from \"react-google-maps\";\n\nimport * as churchData from \"../../data/churches.json\"\nimport mapStyles from \"../../mapStyles\";\n\n\nfunction Map() {\n  //built a hook to keep track of states without a class: selectedChurch tracks which church is clicked and setSelectedChurch can change the church displayed on the map  \n    const [selectedChurch, setSelectedChurch] = useState(null);\n  \n    return (\n      <GoogleMap\n        defaultZoom={13}\n        defaultCenter={{ lat: 42.3736, lng: -71.1097 }} //centered in cambridge\n        defaultOptions={{styles: mapStyles}}\n      >\n      {/* //reads church data as churchData from the churches.json file */}\n      {/* //making a marker based on the lat and lng coordinates of the church -> we used an address to lat lng converter online to find the values */}\n       {churchData.properties.map(church => (\n          <Marker key = {church.features.id} position={{ \n            lat: church.features.lat,\n            lng: church.features.lng,\n            }} \n            //changes selectedChurch based on which marker the user clicks on\n            onClick={() => {\n              setSelectedChurch(church);\n            }}\n            //sets icon and size of the church logo\n            icon={{\n              url: '/church.png',\n              scaledSize: new window.google.maps.Size(25,25) \n            }}\n          />\n        ))}  \n            \n       {selectedChurch && (\n         //creates infowindow which displays the church name and the church address each time the user clicks on a marker\n          <InfoWindow\n             position={{ \n              lat: selectedChurch.features.lat,\n              lng: selectedChurch.features.lng, \n            }} \n             onCloseClick={() => {\n            setSelectedChurch(null);\n           }}\n         >\n         {/* //need the style tags because text color is opaque in the react-google-maps packages */}\n            <div>\n             <h2 style={{color: 'black'}}>{selectedChurch.features.name}</h2>\n             <p style={{color: 'black'}}>{selectedChurch.features.address}</p>\n            </div>\n          </InfoWindow>\n       )}\n      </GoogleMap>\n   );\n }\n  \n//wraps map using withScriptjs\n  const WrappedMap = withScriptjs(withGoogleMap(Map));\n\n  //render map with Google API and API Key\n  //key = AIzaSyASigF8g5y-u4pWOqF41qMmiF2gWBQCUVw\n  class FinalMap extends React.Component {\n    render() {\n      return (\n        <div style = {{ width: \"83vw\", height: \"60vh\", }}>\n          <WrappedMap \n            googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyASigF8g5y-u4pWOqF41qMmiF2gWBQCUVw`}\n            loadingElement={<div style={{ height: \"100%\" }} /> }\n            containerElement={<div style={{ height: \"100%\" }} /> }\n            mapElement={<div style={{ height: \"100%\" }} /> }\n          />\n        </div>\n      )\n    }\n  }\n\n  export default FinalMap;"]},"metadata":{},"sourceType":"module"}