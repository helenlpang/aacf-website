{"ast":null,"code":"import _slicedToArray from \"/Users/myunginlee/Documents/projects/aacf-website/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/myunginlee/Documents/projects/aacf-website/client/src/components/Map/Map.js\";\nimport React, { useState } from 'react';\nimport { GoogleMap, withScriptjs, withGoogleMap, Marker, InfoWindow } from \"react-google-maps\";\nimport * as churchData from \"../../data/churches.json\";\nimport mapStyles from \"../../mapStyles\";\n\nfunction Map() {\n  //built a hook to keep track of states without a class: selectedChurch tracks which church is clicked and setSelectedChurch can change the church displayed on the map  \n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        selectedChurch = _useState2[0],\n        setSelectedChurch = _useState2[1];\n\n  return React.createElement(GoogleMap, {\n    defaultZoom: 13,\n    defaultCenter: {\n      lat: 42.3736,\n      lng: -71.1097\n    } //centered in cambridge\n    ,\n    defaultOptions: {\n      styles: mapStyles\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, churchData.properties.map(church => React.createElement(Marker, {\n    key: church.features.id,\n    position: {\n      lat: church.features.lat,\n      lng: church.features.lng\n    } //changes selectedChurch based on which marker the user clicks on\n    ,\n    onClick: () => {\n      setSelectedChurch(church);\n    } //sets icon and size of the church logo\n    ,\n    icon: {\n      url: '/church.png',\n      scaledSize: new window.google.maps.Size(25, 25)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  })), selectedChurch && //creates infowindow which displays the church name and the church address each time the user clicks on a marker\n  React.createElement(InfoWindow, {\n    position: {\n      lat: selectedChurch.features.lat,\n      lng: selectedChurch.features.lng\n    },\n    onCloseClick: () => {\n      setSelectedChurch(null);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    style: {\n      color: 'black'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, selectedChurch.features.name), React.createElement(\"p\", {\n    style: {\n      color: 'black'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, selectedChurch.features.address))));\n} //wraps map using withScriptjs\n\n\nconst WrappedMap = withScriptjs(withGoogleMap(Map)); //render map with Google API and API Key\n//key = AIzaSyASigF8g5y-u4pWOqF41qMmiF2gWBQCUVw\n\nclass FinalMap extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        width: \"83vw\",\n        height: \"60vh\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(WrappedMap, {\n      googleMapURL: \"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyASigF8g5y-u4pWOqF41qMmiF2gWBQCUVw\",\n      loadingElement: React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }),\n      containerElement: React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }),\n      mapElement: React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default FinalMap;","map":{"version":3,"sources":["/Users/myunginlee/Documents/projects/aacf-website/client/src/components/Map/Map.js"],"names":["React","useState","GoogleMap","withScriptjs","withGoogleMap","Marker","InfoWindow","churchData","mapStyles","Map","selectedChurch","setSelectedChurch","lat","lng","styles","properties","map","church","features","id","url","scaledSize","window","google","maps","Size","color","name","address","WrappedMap","FinalMap","Component","render","width","height"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nimport { \n    GoogleMap, \n    withScriptjs, \n    withGoogleMap, \n    Marker,\n    InfoWindow\n  } from \"react-google-maps\";\n\nimport * as churchData from \"../../data/churches.json\"\nimport mapStyles from \"../../mapStyles\";\n\n\nfunction Map() {\n  //built a hook to keep track of states without a class: selectedChurch tracks which church is clicked and setSelectedChurch can change the church displayed on the map  \n    const [selectedChurch, setSelectedChurch] = useState(null);\n  \n    return (\n      <GoogleMap\n        defaultZoom={13}\n        defaultCenter={{ lat: 42.3736, lng: -71.1097 }} //centered in cambridge\n        defaultOptions={{styles: mapStyles}}\n      >\n      {/* //reads church data as churchData from the churches.json file */}\n      {/* //making a marker based on the lat and lng coordinates of the church -> we used an address to lat lng converter online to find the values */}\n       {churchData.properties.map(church => (\n          <Marker key = {church.features.id} position={{ \n            lat: church.features.lat,\n            lng: church.features.lng,\n            }} \n            //changes selectedChurch based on which marker the user clicks on\n            onClick={() => {\n              setSelectedChurch(church);\n            }}\n            //sets icon and size of the church logo\n            icon={{\n              url: '/church.png',\n              scaledSize: new window.google.maps.Size(25,25) \n            }}\n          />\n        ))}  \n            \n       {selectedChurch && (\n         //creates infowindow which displays the church name and the church address each time the user clicks on a marker\n          <InfoWindow\n             position={{ \n              lat: selectedChurch.features.lat,\n              lng: selectedChurch.features.lng, \n            }} \n             onCloseClick={() => {\n            setSelectedChurch(null);\n           }}\n         >\n         {/* //need the style tags because text color is opaque in the react-google-maps packages */}\n            <div>\n             <h2 style={{color: 'black'}}>{selectedChurch.features.name}</h2>\n             <p style={{color: 'black'}}>{selectedChurch.features.address}</p>\n            </div>\n          </InfoWindow>\n       )}\n      </GoogleMap>\n   );\n }\n  \n//wraps map using withScriptjs\n  const WrappedMap = withScriptjs(withGoogleMap(Map));\n\n  //render map with Google API and API Key\n  //key = AIzaSyASigF8g5y-u4pWOqF41qMmiF2gWBQCUVw\n  class FinalMap extends React.Component {\n    render() {\n      return (\n        <div style = {{ width: \"83vw\", height: \"60vh\", }}>\n          <WrappedMap \n            googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyASigF8g5y-u4pWOqF41qMmiF2gWBQCUVw`}\n            loadingElement={<div style={{ height: \"100%\" }} /> }\n            containerElement={<div style={{ height: \"100%\" }} /> }\n            mapElement={<div style={{ height: \"100%\" }} /> }\n          />\n        </div>\n      )\n    }\n  }\n\n  export default FinalMap;"]},"metadata":{},"sourceType":"module"}